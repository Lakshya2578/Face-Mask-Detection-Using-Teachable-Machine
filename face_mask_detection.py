# -*- coding: utf-8 -*-
"""Face Mask Detection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aJqr1OzDFvAvqqgcz5frACaCoU1Saqjy
"""



from keras.models import load_model
from PIL import Image, ImageOps
import numpy as np

def gen_labels():
  labels = {}
  with open("/content/drive/MyDrive/Face Mask Detection Project/Face Mask Detection Project/labels.txt", "r") as label:
    text = label.read()
    lines = text.split("\n")
    for line in lines[0 :- 1]:
      hold = line.split(" ",1)
      labels[hold[0]] = hold[1]
      return labels

# Disable scientific notation for clarity
np.set_printoptions(suppress=True)      

# Load the model
model = tensorflow.keras.models.load_model('/content/drive/MyDrive/Face Mask Detection Project/Face Mask Detection Project/keras_model.h5')

# Create the array of the right shape to feed into the keras model
# The 'length' or number of images you can put into the array is
# determined by the first position in the shape tuple, in this case 1.
data = np.ndarray(shape=(1, 224, 224, 3), dtype=np.float32)
# Replace this with the path to your image
image = Image.open('/content/drive/MyDrive/Face Mask Detection Project/Face Mask Detection Project/Without Mask/16.jpg')
#resize the image to a 224x224 with the same strategy as in TM2:
#resizing the image to be at least 224x224 and then cropping from the center
size = (224, 224)
image = ImageOps.fit(image, size, Image.ANTIALIAS)

#turn the image into a numpy array
image_array = np.asarray(image)
# display the resized image
image.show()
# Normalize the image
normalized_image_array = (image_array.astype(np.float32) / 127.0) - 1
# Load the image into the array
data[0] = normalized_image_array

# run the inference
prediction = model.predict(data)
result = np.argmax(prediction[0])


print(prediction)
print(result)
if result==0:
    print("with mask")
if result==1 :
    print("without mask")